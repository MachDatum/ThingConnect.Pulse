// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThingConnect.Pulse.Server.Data;

#nullable disable

namespace ThingConnect.Pulse.Server.Migrations
{
    [DbContext(typeof(PulseDbContext))]
    partial class PulseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.CheckResultRaw", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EndpointId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Error")
                        .HasColumnType("TEXT");

                    b.Property<double?>("RttMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Ts")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EndpointId", "Ts");

                    b.ToTable("check_result_raw", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.ConfigVersion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Actor")
                        .HasColumnType("TEXT");

                    b.Property<long>("AppliedTs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppliedTs");

                    b.ToTable("config_version", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Endpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExpectedRttMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(253)
                        .HasColumnType("TEXT");

                    b.Property<string>("HttpMatch")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("HttpPath")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<int>("IntervalSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastChangeTs")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("LastRttMs")
                        .HasColumnType("REAL");

                    b.Property<int?>("LastStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Retries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeoutMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Host");

                    b.HasIndex("GroupId", "Name");

                    b.ToTable("endpoint", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.MonitoringSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EndedTs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShutdownReason")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<long>("StartedTs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EndedTs");

                    b.HasIndex("StartedTs");

                    b.ToTable("monitoring_session", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Outage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EndedTs")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EndpointId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasMonitoringGap")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastError")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MonitoringStoppedTs")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StartedTs")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EndpointId", "EndedTs");

                    b.HasIndex("EndpointId", "StartedTs");

                    b.ToTable("outage", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Rollup15m", b =>
                {
                    b.Property<Guid>("EndpointId")
                        .HasColumnType("TEXT");

                    b.Property<long>("BucketTs")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AvgRttMs")
                        .HasColumnType("double precision");

                    b.Property<int>("DownEvents")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UpPct")
                        .HasColumnType("REAL");

                    b.HasKey("EndpointId", "BucketTs");

                    b.HasIndex("BucketTs");

                    b.ToTable("rollup_15m", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.RollupDaily", b =>
                {
                    b.Property<Guid>("EndpointId")
                        .HasColumnType("TEXT");

                    b.Property<long>("BucketDate")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AvgRttMs")
                        .HasColumnType("double precision");

                    b.Property<int>("DownEvents")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UpPct")
                        .HasColumnType("REAL");

                    b.HasKey("EndpointId", "BucketDate");

                    b.HasIndex("BucketDate");

                    b.ToTable("rollup_daily", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Setting", b =>
                {
                    b.Property<string>("K")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("V")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("K");

                    b.ToTable("setting", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.CheckResultRaw", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Endpoint", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.Group", "Group")
                        .WithMany("Endpoints")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Outage", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Rollup15m", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.RollupDaily", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Group", b =>
                {
                    b.Navigation("Endpoints");
                });
#pragma warning restore 612, 618
        }
    }
}
