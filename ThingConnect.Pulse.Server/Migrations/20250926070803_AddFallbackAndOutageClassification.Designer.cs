// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThingConnect.Pulse.Server.Data;

#nullable disable

namespace ThingConnect.Pulse.Server.Migrations
{
    [DbContext(typeof(PulseDbContext))]
    [Migration("20250926070803_AddFallbackAndOutageClassification")]
    partial class AddFallbackAndOutageClassification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("Role");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.CheckResultRaw", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Classification")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EndpointId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Error")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("FallbackAttempted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FallbackError")
                        .HasColumnType("TEXT");

                    b.Property<double?>("FallbackRttMs")
                        .HasColumnType("double precision");

                    b.Property<string>("FallbackStatus")
                        .HasColumnType("TEXT");

                    b.Property<double?>("RttMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Ts")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EndpointId", "Ts");

                    b.ToTable("check_result_raw", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.ConfigVersion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Actor")
                        .HasColumnType("TEXT");

                    b.Property<long>("AppliedTs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppliedTs");

                    b.ToTable("config_version", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Endpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExpectedRttMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(253)
                        .HasColumnType("TEXT");

                    b.Property<string>("HttpMatch")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("HttpPath")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<int>("IntervalSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastChangeTs")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("LastRttMs")
                        .HasColumnType("REAL");

                    b.Property<int?>("LastStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Retries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeoutMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Host");

                    b.HasIndex("GroupId", "Name");

                    b.ToTable("endpoint", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.MonitoringSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EndedTs")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastActivityTs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShutdownReason")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<long>("StartedTs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EndedTs");

                    b.HasIndex("StartedTs");

                    b.ToTable("monitoring_session", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionText")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedTs")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShown")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReadTs")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOnce")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ShownTs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TargetVersions")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ValidFromTs")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ValidUntilTs")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ValidFromTs");

                    b.HasIndex("ValidUntilTs");

                    b.HasIndex("IsRead", "ValidFromTs");

                    b.HasIndex("Priority", "ValidFromTs");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.NotificationFetch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Error")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FetchTs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RemoteLastUpdated")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RemoteVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FetchTs");

                    b.HasIndex("Success");

                    b.ToTable("notification_fetch", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Outage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Classification")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EndedTs")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EndpointId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasMonitoringGap")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastError")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MonitoringStoppedTs")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StartedTs")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EndpointId", "EndedTs");

                    b.HasIndex("EndpointId", "StartedTs");

                    b.ToTable("outage", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Rollup15m", b =>
                {
                    b.Property<Guid>("EndpointId")
                        .HasColumnType("TEXT");

                    b.Property<long>("BucketTs")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AvgRttMs")
                        .HasColumnType("double precision");

                    b.Property<int>("DownEvents")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UpPct")
                        .HasColumnType("REAL");

                    b.HasKey("EndpointId", "BucketTs");

                    b.HasIndex("BucketTs");

                    b.ToTable("rollup_15m", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.RollupDaily", b =>
                {
                    b.Property<Guid>("EndpointId")
                        .HasColumnType("TEXT");

                    b.Property<long>("BucketDate")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AvgRttMs")
                        .HasColumnType("double precision");

                    b.Property<int>("DownEvents")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UpPct")
                        .HasColumnType("REAL");

                    b.HasKey("EndpointId", "BucketDate");

                    b.HasIndex("BucketDate");

                    b.ToTable("rollup_daily", (string)null);
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Setting", b =>
                {
                    b.Property<string>("K")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("V")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("K");

                    b.ToTable("setting", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThingConnect.Pulse.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.CheckResultRaw", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Endpoint", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.Group", "Group")
                        .WithMany("Endpoints")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Outage", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Rollup15m", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.RollupDaily", b =>
                {
                    b.HasOne("ThingConnect.Pulse.Server.Data.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("ThingConnect.Pulse.Server.Data.Group", b =>
                {
                    b.Navigation("Endpoints");
                });
#pragma warning restore 612, 618
        }
    }
}
