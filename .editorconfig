# EditorConfig is awesome: https://EditorConfig.org
# Top-most EditorConfig file
root = true

# All files
[*]
indent_style = space
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true
charset = utf-8

# C# files
[*.cs]
indent_size = 4

# C# naming conventions
dotnet_naming_rule.interface_should_be_prefixed_with_i.severity = warning
dotnet_naming_rule.interface_should_be_prefixed_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_prefixed_with_i.style = prefixed_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications
dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected

# Naming styles
dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.prefixed_with_i.required_prefix = I
dotnet_naming_style.prefixed_with_i.required_suffix = 
dotnet_naming_style.prefixed_with_i.word_separator = 
dotnet_naming_style.prefixed_with_i.capitalization = pascal_case

# Code style rules
csharp_prefer_braces = true:warning
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_namespace_declarations = file_scoped:warning
csharp_style_prefer_method_group_conversion = true:suggestion
csharp_style_prefer_top_level_statements = true:suggestion
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_operators = false:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

# var preferences
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Code quality rules (relaxed for internal project)
dotnet_diagnostic.CA1031.severity = none  # Do not catch general exception types
dotnet_diagnostic.CA2007.severity = none  # Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA1062.severity = suggestion  # Validate arguments of public methods

# StyleCop Rules (selective enforcement for internal project)
dotnet_diagnostic.SA0001.severity = none  # XML comment analysis disabled
dotnet_diagnostic.SA1633.severity = none  # File should have header
dotnet_diagnostic.SA1200.severity = none  # Using directives should be placed correctly
dotnet_diagnostic.SA1101.severity = none  # Prefix local calls with this
dotnet_diagnostic.SA1309.severity = none  # Field names should not begin with underscore
dotnet_diagnostic.SA1413.severity = none  # Use trailing comma in multi-line initializers
dotnet_diagnostic.SA1118.severity = suggestion  # Parameter should not span multiple lines
dotnet_diagnostic.SA1600.severity = none  # Elements should be documented
dotnet_diagnostic.SA1601.severity = none  # Partial elements should be documented
dotnet_diagnostic.SA1602.severity = none  # Enumeration items should be documented
dotnet_diagnostic.SA1116.severity = suggestion  # Parameters should begin on line after declaration
dotnet_diagnostic.SA1117.severity = suggestion  # Parameters should be on same line or separate lines
dotnet_diagnostic.SA1127.severity = suggestion  # Generic constraints should be on own line
dotnet_diagnostic.SA1108.severity = suggestion  # Block statements should not contain embedded comments
dotnet_diagnostic.SA1502.severity = suggestion  # Element should not be on single line
dotnet_diagnostic.SA1516.severity = suggestion  # Elements should be separated by blank line
dotnet_diagnostic.SA1300.severity = suggestion  # Element should begin with uppercase letter
dotnet_diagnostic.SA1136.severity = suggestion  # Enum values should be on separate lines

# TypeScript, JavaScript, JSX, TSX files
[*.{ts,tsx,js,jsx}]
indent_size = 2
quote_type = single

# JSON files
[*.json]
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_size = 2

# Markdown files
[*.md]
trim_trailing_whitespace = false

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Config files
[*.{props,targets}]
indent_size = 2